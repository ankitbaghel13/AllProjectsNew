package binaryTrees;

import java.util.LinkedList;
import java.util.Queue;

public class InvertBinaryTree {

	public static void main(String[] args) {
		
		Node root = TreeUtility.getAlgoExpertTree();
		DepthFirstTraversals.printInorder(root);
		invertBinaryTree(root);
	}

	/*					   1
	 *					 /	 \
	 * 				   2	  3
	 * 			      /	\	 / \ 
	 *			     4	 5  6   7
	 *              / \
	 *             8   9	   
	 */
	private static void invertBinaryTree(Node root) {
		
		Queue<Node> queue = new LinkedList<>();
		queue.add(root);
		Node current;
		while(!queue.isEmpty()) {
			current = queue.poll();
			swapNodes(current);
			if(current.left!=null)
				queue.add(current.left);
			if(current.right!=null)	
				queue.add(current.right);
		}
		System.out.println();
		DepthFirstTraversals.printInorder(root);
	}
	
	private static void swapNodes(Node current) {
		Node temp = current.left;
		current.left = current.right;
		current.right = temp;
	}
}
